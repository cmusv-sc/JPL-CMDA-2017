diff --git a/JPL_CMDA/services/svc/svc/services/entry.py b/JPL_CMDA/services/svc/svc/services/entry.py
index 5c14539..a39085a 100644
--- a/JPL_CMDA/services/svc/svc/services/entry.py
+++ b/JPL_CMDA/services/svc/svc/services/entry.py
@@ -71,10 +71,10 @@ CMU_PROVENANCE_URL = 'http://einstein.sv.cmu.edu:9034/serviceExecutionLog/addSer
 ### VIRTUAL_EINSTEIN_URL = 'http://ec2-54-183-11-107.us-west-1.compute.amazonaws.com:9034/serviceExecutionLog/addServiceExecutionLog'
 
 HEADERS = {'Content-Type': 'application/json'}
-### USE_CMU = True
-USE_CMU = False
+USE_CMU = True
+### USE_CMU = False
 
- 
+""" 
 userIdDict = { 
               "admin": 1,
               "caquilinger": 2,
@@ -119,6 +119,7 @@ userIdDict = {
               "mqi": 41,
               "rwang": 42
               }
+""" 
 
 IPDict = { 
               "54.183.194.175": 26,
@@ -245,13 +246,20 @@ def displayTwoDimMap():
     purpose = request.args.get('purpose', '')
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
+
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     #added by CMU
     parameters_json = {'model':model, 'var':var, 'startT':startT,
                        'endT':endT, 'lon1':lon1, 'lon2':lon2,
                        'lat1':lat1, 'lat2':lat2, 'months':months,
                        'scale':scale}
-    #/added by CMU
-
 
     print 'model: ', model
     print 'var: ', var
@@ -286,7 +294,9 @@ def displayTwoDimMap():
       os.chdir(current_dir)
 
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+
+      ### userId = 2
+
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -296,6 +306,7 @@ def displayTwoDimMap():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data')
           response2 = urllib2.urlopen(req2)
@@ -304,6 +315,7 @@ def displayTwoDimMap():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
 
       # get userId from userIdDict
       """
@@ -382,7 +394,6 @@ def displayTwoDimMap():
 
     executionEndTime = int(time.time())
 
-    # XXXXX
     urlLink = request.query_string
     urlLink = urlLink.strip() + '&image=%s&data_url=%s' % (plotUrl, dataUrl)
     print 'urlLink: ', urlLink
@@ -438,6 +449,14 @@ def displayTwoDimMapPOST():
     months = jsonData['months']
     scale = jsonData['scale']
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     #added by Chris
     parameters_json = {'model':model, 'var':var, 'startT':startT,
                        'endT':endT, 'lon1':lon1, 'lon2':lon2,
@@ -477,7 +496,8 @@ def displayTwoDimMapPOST():
       os.chdir(current_dir)
 
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -486,6 +506,7 @@ def displayTwoDimMapPOST():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
            req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
            response2 = urllib2.urlopen(req2) 
@@ -493,6 +514,7 @@ def displayTwoDimMapPOST():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       """
       if userIdDict.has_key(userId):
@@ -620,6 +642,14 @@ def display_mapView():
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     # get where the input file and output file are
     current_dir = os.getcwd()
     print 'current_dir: ', current_dir
@@ -645,7 +675,8 @@ def display_mapView():
       os.chdir(current_dir)
 
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -654,6 +685,7 @@ def display_mapView():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
            req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
            response2 = urllib2.urlopen(req2) 
@@ -661,6 +693,7 @@ def display_mapView():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       """
       if userIdDict.has_key(userId):
@@ -775,6 +808,14 @@ def display_timeSeries():
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     # get model, var, start time, end time, lon1, lon2, lat1, lat2, scale
     keywordMap = {
       'model':'model', 
@@ -835,7 +876,8 @@ def display_timeSeries():
       os.chdir(current_dir)
 
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -844,6 +886,7 @@ def display_timeSeries():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
            req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
            response2 = urllib2.urlopen(req2) 
@@ -851,6 +894,7 @@ def display_timeSeries():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       """
       if userIdDict.has_key(userId):
@@ -1001,6 +1045,14 @@ def display_timeSeriesWorkFlow():
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     try:
       seed_str = varInfoStr+scale
       tag = md5.new(seed_str).hexdigest()
@@ -1025,7 +1077,7 @@ def display_timeSeriesWorkFlow():
       os.chdir(current_dir)
 
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -1034,6 +1086,7 @@ def display_timeSeriesWorkFlow():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
            req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
            response2 = urllib2.urlopen(req2) 
@@ -1041,6 +1094,7 @@ def display_timeSeriesWorkFlow():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       """
       if userIdDict.has_key(userId):
@@ -1173,6 +1227,14 @@ def display_timeSeries2D():
     current_dir = os.getcwd()
     print 'current_dir: ', current_dir
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     try:
       seed_str = model+var+startT+endT+lon1+lon2+lat1+lat2+scale
       tag = md5.new(seed_str).hexdigest()
@@ -1191,7 +1253,7 @@ def display_timeSeries2D():
       os.chdir(current_dir)
 
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -1200,6 +1262,7 @@ def display_timeSeries2D():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -1207,6 +1270,7 @@ def display_timeSeries2D():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       """
       if userIdDict.has_key(userId):
@@ -1327,6 +1391,14 @@ def displayTwoDimSlice3D():
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     '''
     jsonData = request.json
 
@@ -1381,7 +1453,7 @@ def displayTwoDimSlice3D():
       os.chdir(current_dir)
 
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -1390,6 +1462,7 @@ def displayTwoDimSlice3D():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -1397,6 +1470,7 @@ def displayTwoDimSlice3D():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
       
       """
       if userIdDict.has_key(userId):
@@ -1452,7 +1526,6 @@ def displayTwoDimSlice3D():
     executionEndTime = int(time.time())
 
     ### urlLink = 'model1=%s&var1=%s&lon1=%s&lon2=%s&lat1=%s&lat2=%s&startT=%s&endT=%s&months=%s&scale=%s&image=%s&data_url=%s' % (model,var,lon1,lon2,lat1,lat2,startT,endT,months,scale,plotUrl,dataUrl)
-    # XXXXX
     urlLink = request.query_string
     urlLink = urlLink.strip() + '&image=%s&data_url=%s' % (plotUrl, dataUrl)
     print 'urlLink: ', urlLink
@@ -1505,6 +1578,14 @@ def displayTwoDimZonalMean():
     query_string = request.query_string
     frontend_url = request.args.get('fromPage', '')
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     parameters_json = {'data source':model, 'variable name':var, 'start year-month':startT,
                        'end year-month':endT,
                        'start lat (deg)':lat1, 'end lat (deg)':lat2, 'select months':months,
@@ -1544,7 +1625,7 @@ def displayTwoDimZonalMean():
       os.chdir(current_dir)
 
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -1553,6 +1634,7 @@ def displayTwoDimZonalMean():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -1560,6 +1642,7 @@ def displayTwoDimZonalMean():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
       
       """
       if userIdDict.has_key(userId):
@@ -1668,6 +1751,14 @@ def displayThreeDimZonalMean():
     query_string = request.query_string
     frontend_url = request.args.get('fromPage', '')
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     pres1 = convertPres(var, pres1)
     pres2 = convertPres(var, pres2)
 
@@ -1710,7 +1801,7 @@ def displayThreeDimZonalMean():
       os.chdir(current_dir)
 
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -1719,6 +1810,7 @@ def displayThreeDimZonalMean():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -1726,6 +1818,7 @@ def displayThreeDimZonalMean():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
       
       """
       if userIdDict.has_key(userId):
@@ -1782,7 +1875,6 @@ def displayThreeDimZonalMean():
 #    datasetLogId = "Test .\'\"\\logId"
     executionEndTime = int(time.time())
 
-# XXXX
     urlLink = request.query_string
     urlLink = urlLink.strip() + '&image=%s&data_url=%s' % (plotUrl, dataUrl)
     print 'urlLink: ', urlLink
@@ -1836,6 +1928,14 @@ def displayThreeDimVerticalProfile():
     query_string = request.query_string
     frontend_url = request.args.get('fromPage', '')
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     parameters_json = {'model':model, 'var':var, 'startT':startT,
                        'endT':endT, 'lon1':lon1, 'lon2':lon2,
                        'lat1':lat1, 'lat2':lat2, 'months':months,
@@ -1874,7 +1974,7 @@ def displayThreeDimVerticalProfile():
       os.chdir(current_dir)
 
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -1883,6 +1983,7 @@ def displayThreeDimVerticalProfile():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -1890,6 +1991,7 @@ def displayThreeDimVerticalProfile():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
       
       """
       if userIdDict.has_key(userId):
@@ -2020,6 +2122,14 @@ def displayUniversalPlotting():
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     json1 = {
        'center':center, 
        'model':model, 
@@ -2080,7 +2190,7 @@ def displayUniversalPlotting():
         print message1a[1]
      
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -2089,6 +2199,7 @@ def displayUniversalPlotting():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -2096,9 +2207,9 @@ def displayUniversalPlotting():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       print 'userId: ', userId
-
       print 'hostname: ', hostname
       print 'port: ', port
 
@@ -2219,6 +2330,14 @@ def displayUniversalPlotting2():
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     json1 = {
        'center':center, 
        'model':model, 
@@ -2281,7 +2400,7 @@ def displayUniversalPlotting2():
         print message1a[1]
      
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -2290,6 +2409,7 @@ def displayUniversalPlotting2():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -2297,9 +2417,9 @@ def displayUniversalPlotting2():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       print 'userId: ', userId
-
       print 'hostname: ', hostname
       print 'port: ', port
 
@@ -2403,6 +2523,14 @@ def displayScatterPlot2V():
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     parameters_json = {'model1':model1, 'var1':var1, 'pres1':pres1,
                        'model2':model2, 'var2':var2, 'pres2':pres2,
                        'startT':startT,
@@ -2454,7 +2582,7 @@ def displayScatterPlot2V():
         print message1a[1]
      
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -2463,6 +2591,7 @@ def displayScatterPlot2V():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -2470,6 +2599,7 @@ def displayScatterPlot2V():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
       
       """
       if userIdDict.has_key(userId):
@@ -2598,10 +2728,17 @@ def displayDiffPlot2V():
     lon2 = request.args.get('lonE', '')
     lat1 = request.args.get('latS', '')
     lat2 = request.args.get('latE', '')
-    # YYYYY
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     parameters_json = {'model1':model1, 'var1':var1, 'pres1':pres1,
                        'model2':model2, 'var2':var2, 'pres2':pres2,
                        'startT':startT,
@@ -2644,7 +2781,7 @@ def displayDiffPlot2V():
       os.chdir(current_dir)
 
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -2653,6 +2790,7 @@ def displayDiffPlot2V():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -2660,6 +2798,7 @@ def displayDiffPlot2V():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
       
       """
       if userIdDict.has_key(userId):
@@ -2775,6 +2914,14 @@ def displayConditionalSamp():
     query_string = request.query_string
     frontend_url = request.args.get('fromPage', '')
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     pres1 = convertPres(var1, pres1)
     pres2 = convertPres(var1, pres2)
     env_var_plev = convertPres(var2, env_var_plev)
@@ -2855,7 +3002,7 @@ def displayConditionalSamp():
       os.chdir(current_dir)
 
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -2864,6 +3011,7 @@ def displayConditionalSamp():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -2871,6 +3019,7 @@ def displayConditionalSamp():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
       
       """
       if userIdDict.has_key(userId):
@@ -2992,6 +3141,14 @@ def displayConditionalSamp2Var():
     query_string = request.query_string
     frontend_url = request.args.get('fromPage', '')
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     pres1 = convertPres(var1, pres1)
     pres2 = convertPres(var1, pres2)
     env_var_plev1 = convertPres(var2, env_var_plev1)
@@ -3085,7 +3242,7 @@ def displayConditionalSamp2Var():
       os.chdir(current_dir)
 
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -3094,6 +3251,7 @@ def displayConditionalSamp2Var():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -3101,6 +3259,7 @@ def displayConditionalSamp2Var():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       """
       if userIdDict.has_key(userId):
@@ -3736,10 +3895,17 @@ def displayCorrelationMap():
     lonE = request.args.get('lonE', '')
     latS = request.args.get('latS', '')
     latE = request.args.get('latE', '')
-    # KKKKK
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     json1 = {
        'center':center, 
        'model':model, 
@@ -3793,7 +3959,7 @@ def displayCorrelationMap():
         print message1a[1]
      
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -3802,6 +3968,7 @@ def displayCorrelationMap():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -3809,6 +3976,7 @@ def displayCorrelationMap():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       """
       if userIdDict.has_key(userId):
@@ -3927,10 +4095,17 @@ def displayRandomForest():
     lonE = request.args.get('lonE', '')
     latS = request.args.get('latS', '')
     latE = request.args.get('latE', '')
-    # LLLLL
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     json1 = {
        'nVar':nVar, 
        'center':center, 
@@ -3984,7 +4159,7 @@ def displayRandomForest():
         print message1a[1]
      
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -3993,6 +4168,7 @@ def displayRandomForest():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -4000,6 +4176,7 @@ def displayRandomForest():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       """
       if userIdDict.has_key(userId):
@@ -4121,6 +4298,14 @@ def displayEOF():
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     json1 = {
        'center':center, 
        'model':model, 
@@ -4174,7 +4359,7 @@ def displayEOF():
         print message1a[1]
      
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -4183,6 +4368,7 @@ def displayEOF():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -4190,6 +4376,7 @@ def displayEOF():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       """
       if userIdDict.has_key(userId):
@@ -4307,10 +4494,17 @@ def displayConditionalPdf():
     anomaly = request.args.get('anomaly', '')
     nBinX = request.args.get('nBinX', '')
     nBinY = request.args.get('nBinY', '')
-    # BBBB
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     json1 = {
        'nVar':nVar, 
        'center':center, 
@@ -4367,7 +4561,7 @@ def displayConditionalPdf():
         print message1a[1]
      
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -4376,6 +4570,7 @@ def displayConditionalPdf():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -4383,6 +4578,7 @@ def displayConditionalPdf():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       """
       if userIdDict.has_key(userId):
@@ -4508,11 +4704,18 @@ def displayAnomaly():
     useVar2 = request.args.get('useVar2', '')
     useTime2 = request.args.get('useTime2', '')
     tag1 = request.args.get('tag', '')
-    # AAAAA
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
     print 'startT2, endT2: ', startT2, endT2
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     json1 = {
        'center':center, 
        'model':model, 
@@ -4574,7 +4777,7 @@ def displayAnomaly():
         print message1a[1]
      
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -4583,6 +4786,7 @@ def displayAnomaly():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -4590,6 +4794,7 @@ def displayAnomaly():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       """
       if userIdDict.has_key(userId):
@@ -4709,6 +4914,14 @@ def displayMapPlot():
     frontend_url = request.args.get('fromPage', '')
     print 'frontend_url: ', frontend_url
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     json1 = {
        'useVmin1':useVmin1, 
        'vmin1':vmin1, 
@@ -4767,7 +4980,7 @@ def displayMapPlot():
         print message1a[1]
      
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -4776,6 +4989,7 @@ def displayMapPlot():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -4783,6 +4997,7 @@ def displayMapPlot():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       """
       if userIdDict.has_key(userId):
@@ -4902,6 +5117,14 @@ def displayMap2d():
     #vmax1 = request.args.get('vmax1', '')
     #data_url1 = request.args.get('data_url', '')
 
+    userId = request.args.get('userid', '')
+    print 'from url, userId: ', userId
+
+    if userId != None:
+      userId = int(userId)
+    else:
+      userId = 0
+
     json1 = {
        'center':center, 
        'model':model, 
@@ -4967,7 +5190,7 @@ def displayMap2d():
         print message1a[1]
      
       hostname, port = get_host_port("host.cfg")
-      userId = 2
+      ### userId = 2
       if hostname == 'EC2':
         try:
           req = urllib2.Request('http://169.254.169.254/latest/meta-data/public-ipv4')
@@ -4976,6 +5199,7 @@ def displayMap2d():
         except Exception, e:
           print 'e: ', e
 
+        """
         try:
           req2 = urllib2.Request(' http://169.254.169.254/latest/user-data') 
           response2 = urllib2.urlopen(req2) 
@@ -4983,6 +5207,7 @@ def displayMap2d():
         except Exception, e:
           print 'e: ', e
           userId = 2
+        """
  
       """
       if userIdDict.has_key(userId):
